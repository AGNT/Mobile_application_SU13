package com.agnt.locate;

import java.io.IOException;
import java.text.DecimalFormat;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.method.LinkMovementMethod;
import android.view.View;
import android.view.Window;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnInfoWindowClickListener;
import com.google.android.gms.maps.GoogleMap.OnMapClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.sothree.slidinguppanel.SlidingUpPanelLayout;
import com.sothree.slidinguppanel.SlidingUpPanelLayout.PanelSlideListener;

public class MainActivity extends Activity implements OnMapClickListener {

	LatLng ANSWER = new LatLng(40.68917, -74.04444);
	LatLng RESET = new LatLng(0.0, 0.0);
	String NAME = null;
	private int points = 0;

	String url = "http://cs13.cs.sjsu.edu:8080/team2/target/random";
	Document doc;
	String[] items = new String[4];

	TextView display_latlng;
	TextView display_name;

	private GoogleMap map;

	WebView wv;
	WebSettings settings;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		getWindow().requestFeature(Window.FEATURE_ACTION_BAR_OVERLAY);
		setContentView(R.layout.activity_main);

		display_latlng = (TextView) findViewById(R.id.brought_by);

		Toast.makeText(getBaseContext(), "Please wait for the map to load.",
				Toast.LENGTH_SHORT).show();
		map = ((MapFragment) getFragmentManager().findFragmentById(R.id.map))
				.getMap();

		map.setOnMapClickListener(this);

		SlidingUpPanelLayout layout = (SlidingUpPanelLayout) findViewById(R.id.sliding_layout);
		layout.setShadowDrawable(getResources().getDrawable(
				R.drawable.above_shadow));
		layout.setPanelSlideListener(new PanelSlideListener() {

			@Override
			public void onPanelSlide(View panel, float slideOffset) {
				if (slideOffset < 0.2) {
					if (getActionBar().isShowing()) {
						getActionBar().hide();
					}
				} else {
					if (!getActionBar().isShowing()) {
						getActionBar().show();
					}
				}
			}

			@Override
			public void onPanelExpanded(View panel) {

			}

			@Override
			public void onPanelCollapsed(View panel) {

			}
		});
		display_name = (TextView) findViewById(R.id.tv_q);
		display_name.setText("Find: " + NAME);
		display_name.setMovementMethod(LinkMovementMethod.getInstance());

		wv = (WebView) findViewById(R.id.webView);
		settings = wv.getSettings();
		settings.setBuiltInZoomControls(false);
		settings.setUseWideViewPort(true);
		settings.setJavaScriptEnabled(true);
		settings.setSupportMultipleWindows(true);
		settings.setJavaScriptCanOpenWindowsAutomatically(true);
		settings.setLoadsImagesAutomatically(true);
		settings.setLightTouchEnabled(true);
		settings.setDomStorageEnabled(true);
		settings.setLoadWithOverviewMode(true);
		setDrawerImage();
	}

	private void setDrawerImage() {
		String imgurl = "https://www.google.com/search?site=imghp&tbm=isch&q="
				+ NAME;
		wv.setWebViewClient(new WebViewClient() {
			public boolean shouldOverrideUrlLoading(WebView view, String url) {
				view.loadUrl(url);
				return false;
			}
		});
		wv.loadUrl(imgurl);
	}

	// calculate distance
	private double distance(double lat1, double lon1, double lat2, double lon2,
			String unit) {
		double theta = lon1 - lon2;
		double dist = Math.sin(deg2rad(lat1)) * Math.sin(deg2rad(lat2))
				+ Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2))
				* Math.cos(deg2rad(theta));
		dist = Math.acos(dist);
		dist = rad2deg(dist);
		dist = dist * 60 * 1.1515;
		if (unit == "K") {
			dist = dist * 1.609344;
		} else if (unit == "N") {
			dist = dist * 0.8684;
		}
		return (dist);
	}

	private double deg2rad(double deg) {
		return (deg * Math.PI / 180.0);
	}

	private double rad2deg(double rad) {
		return (rad * 180.0 / Math.PI);
	}

	@Override
	public void onMapClick(LatLng POINT) {
		DecimalFormat df = new DecimalFormat();
		df.setMaximumFractionDigits(4);
		display_latlng.setText("Your coordinates:\n" + "("
				+ df.format(POINT.latitude) + ", " + df.format(POINT.longitude)
				+ ")");

		// clears previously selected point
		map.clear();

		Marker guess = map.addMarker(new MarkerOptions().position(POINT)
				.title("Your Guess")
				.snippet("Click here to check submit results!"));
		guess.showInfoWindow();

		final double result = distance(POINT.latitude, POINT.longitude,
				ANSWER.latitude, ANSWER.longitude, "K");

		// moves camera to specified location
		map.animateCamera(CameraUpdateFactory.newLatLngZoom(POINT, 7), 2000,
				null);

		map.setOnInfoWindowClickListener(new OnInfoWindowClickListener() {
			@Override
			public void onInfoWindowClick(Marker marker) {
				show_diag(Math.round(result));
			}

			private void show_diag(long result) {
				AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
						MainActivity.this);

				// set title
				alertDialogBuilder.setTitle("Your Score!");

				// set dialog message
				alertDialogBuilder
						.setMessage(
								"You are " + result + " KMs away from " + NAME
										+ "\n\nYour score is: "
										+ getScore(result)
										+ "\n\nDo you want to play again?")
						.setCancelable(false)
						.setPositiveButton("Yes!",
								new DialogInterface.OnClickListener() {
									public void onClick(DialogInterface dialog,
											int id) {
										map.clear();
										updateQuestion();
										dialog.cancel();

									}
								})
						.setNegativeButton("No",
								new DialogInterface.OnClickListener() {
									public void onClick(DialogInterface dialog,
											int id) {

										MainActivity.this.finish();
									}
								});

				// create alert dialog
				AlertDialog alertDialog = alertDialogBuilder.create();
				// show it
				alertDialog.show();
			}
		});
	}

	private String getScore(long result) {
		double f = 0;
		if (result >= 0 && result <= 5000) {
			if (result <= 500)
				f = 0;
			else if (result > 500 && result <= 1000)
				f = 0.5;
			else if (result > 1000 && result <= 2000)
				f = 1;
			else if (result > 2000 && result <= 3000)
				f = 2;
			else if (result > 3000 && result <= 4000)
				f = 3;
			points = 5000 - (int) (f * (result / 10));
		} else
			points = 0;

		if (result >= 0 && result <= 500)
			return points + " \nCongratulations!!";
		else if (result > 500 && result <= 1000)
			return points + " \nAwesome!";
		else if (result > 1000 && result <= 2000)
			return points + " \nGood Job!";
		else if (result > 2000 && result <= 3000)
			return points + " \nNice!";
		else if (result > 3000 && result <= 4000)
			return points + " \nCool!";
		else if (result > 4000)
			return points
					+ " \nWOW! You were way off course!\nBetter luck next time!";
		return null;
	}

	// The following code will download the Question from the server
	private void updateQuestion() {
		new getDataAsync().execute();
	}

	private String[] downloadNewQuestion() {
		try {
			doc = Jsoup.connect(url).get();
		} catch (IOException e) {
			e.printStackTrace();
		}
		String title = doc.body().text();
		return title.split(":");

	}

	public class getDataAsync extends AsyncTask<String, Integer, String> {

		ProgressDialog dialog;

		protected void onPreExecute() {
			dialog = new ProgressDialog(MainActivity.this);
			dialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
			dialog.setTitle("Downloading");
			dialog.setMessage("Getting your Question from the server!!");
			dialog.show();
		}

		@Override
		protected String doInBackground(String... params) {
			items = downloadNewQuestion();
			return null;
		}

		protected void onPostExecute(String result) {
			double[] coordinates = new double[2];
			NAME = items[0];
			coordinates[0] = Double.parseDouble(items[1]);
			coordinates[1] = Double.parseDouble(items[2]);
			ANSWER = new LatLng(coordinates[0], coordinates[1]);
			dialog.dismiss();

			// reset map
			map.animateCamera(CameraUpdateFactory.newLatLngZoom(RESET, 2),
					3000, null);

			// update UI elements
			display_name.setText("Where is " + NAME + "?");
			brought_by.setText("Point the correct location on the map\nTouch here to see hint");
			setDrawerImage();
		}
	}

	@Override
	protected void onStart() {
		updateQuestion();
		super.onStart();
	}

	@Override
	protected void onStop() {
		Toast.makeText(getBaseContext(), "Thank you for playing our game",
				Toast.LENGTH_SHORT).show();
		super.onStop();
	}

}
